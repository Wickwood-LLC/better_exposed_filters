<?php
// $Id$

/**
 * Themes a select element as a collection of checkboxes enclosed in a collapsible fieldset
 *
 * @param array $element - An associative array containing the properties of the element.
 *                         Properties used: title, value, options, description, extra, multiple, required
 * @return HTML string representing the form element.
 */
function theme_select_as_checkboxes_fieldset($element) {
  $fieldset = array(
    '#title' => $element['#title'],
    '#collapsible' => TRUE,
    '#description' => $element['#description'],
    '#collapsed' => empty($element['#value']),
    '#attribute' => array('class' => 'bef-select-as-checkboxes-fieldset'),
  );
  
  // Description is rendered as part of the fieldset, don't render it twice.
  unset($element['#description']);
  
  $fieldset['#children'] = theme('select_as_checkboxes', $element);
  return theme('fieldset', $fieldset);
}

/**
 * Themes a select element as a set of checkboxes
 *
 * @see theme_select(), http://api.drupal.org/api/function/theme_select/6
 * @param array $element - An associative array containing the properties of the element.
 *                         Properties used: title, value, options, description, extra, multiple, required
 * @return HTML string representing the form element.
 */
function theme_select_as_checkboxes($element) {
  // the selected keys from #options
  $selected_options = !empty($element['#post'][$element['#name']]) ? (array)$element['#post'][$element['#name']] : $element['#default_value'];
  
  $properties = array(
    'title' => $element['#title'],
    'description' => $element['#description'],
    'required' => FALSE,
  );

  $output = '<div class="bef-checkboxes">';
  foreach ($element['#options'] as $option => $elem) {
    if ('All' === $option) {
      // TODO: 'All' text is customizable in Views
      // No need for an 'All' option -- either unchecking or checking all the checkboxes is equivalent
      continue;
    }

    // Check for Taxonomy-based filters
    if (is_object($elem)) {
      list($option, $elem) = each(array_slice($elem->option, 0, 1, TRUE));
    }

    /*
     * Check for optgroups.  Put subelements in the $element_set array and add a group heading.
     * Otherwise, just add the element to the set
     */
    $element_set = array();
    $is_optgroup = FALSE;
    if (is_array($elem)) {
      $output .= '<div class="bef-group">';
      $output .= '<div class="bef-group-heading">' . $option . '</div>';
      $output .= '<div class="bef-group-items">';
      $element_set = $elem;
      $is_optgroup = TRUE;
    }
    else {
      $element_set[$option] = $elem;
    }

    foreach ($element_set as $key => $value) {
      // Custom ID for each checkbox based on the <select>'s original ID
      $id = form_clean_id($element['#id'] . '-' . $key);

      // Very similar to theme_checkbox (http://api.drupal.org/api/function/theme_checkbox/6)
      $checkbox = '<input type="checkbox" '
        . 'name="'. $element['#name'] .'[]" '    // brackets are key -- just like select
        . 'id="'. $id .'" '
        . 'value="'. $key .'" '
        . ((array_search($key, $selected_options) !== FALSE) ? 'checked="checked" ' : '')
        . drupal_attributes($element['#attributes']) .' />';
      $item = '<label class="option" for="'. $id .'">'. $checkbox .' '. check_plain($value) .'</label>';
      $output .= theme('form_element', array_merge($properties, array('#id' => $id)), $item);
    }

    if ($is_optgroup) {
      $output .= '</div></div>';    // Close group and item <div>s
    }

  }
  $output .= '</div>';

  // Fake theme_checkboxes() which we can't call because it calls theme_form_element() for each option
  $class = 'class="form-checkboxes bef-select-as-checkboxes';
  $class .= (isset($element['#attributes']['class']) ? ' '. $element['#attributes']['class'] : '');
  $class .= '"';

  // Add exposed filter description
  $description = '';
  if (!empty($element['#description'])) {
    $description = '<div class="description">'. $element['#description'] .'</div>';
  }

  return "<div $class>$description$output</div>";
}

/**
 * Themes a select element as a series of hidden fields
 *
 * @see theme_select(), http://api.drupal.org/api/function/theme_select/6
 * @param object $element - An associative array containing the properties of the element.
 *                          Properties used: title, value, options, description, extra, multiple, required
 * @return HTML string representing the form element.
 */
function theme_select_as_hidden($element) {
  $output = '';
  $selected_options = (array)$element['#post'][$element['#name']];   // the selected keys from #options
  $properties = array(
    'title' => $element['#title'],
    'description' => $element['#description'],
    'required' => FALSE,
  );

  foreach ($element['#options'] as $option => $elem) {
    // Check for Taxonomy-based filters
    if (is_object($elem)) {
      list($option, $elem) = each(array_slice($elem->option, 0, 1, TRUE));
    }

    /*
     * Check for optgroups.  Put subelements in the $element_set array and add a group heading.
     * Otherwise, just add the element to the set
     */
    $element_set = array();
    if (is_array($elem)) {
      $element_set = $elem;
    }
    else {
      $element_set[$option] = $elem;
    }

    foreach ($element_set as $key => $value) {

      // Only render fields for selected values -- no selected values renders zero fields
      if (array_search($key, $selected_options) !== FALSE) {
        // Custom ID for each hidden field based on the <select>'s original ID
        $id = form_clean_id($element['#id'] . '-' . $key);

        // Very similar to theme_hidden (http://api.drupal.org/api/function/theme_hidden/6)
        $hidden = '<input type="hidden" '
          . 'name="'. $element['#name'] .'[]" '    // brackets are key -- just like select
          . 'id="'. $id .'" '
          . 'value="'. check_plain($key) .'" '
          . drupal_attributes($element['#attributes']) .' />';
        $output .= theme('form_element', array_merge($properties, array('#id' => $id)), $hidden);
      }
    }
  }
  return $output;
}

function theme_select_as_radios_fieldset($element) {
  // The "all" option is the first in the list. If the selected radio button is the all
  // option, then leave the fieldset collapsed.  Otherwise, render it opened.
  $all = array_shift(array_keys($element['#options']));

  $fieldset = array(
    '#title' => $element['#bef_title'],
    '#collapsible' => TRUE,
    '#description' => $element['#bef_description'],
    '#collapsed' => ($element[$all]['#value'] == $all),
    '#attribute' => array('class' => 'bef-select-as-radios-fieldset'),
  );
  $fieldset['#children'] = theme('select_as_radios', $element);
  return theme('fieldset', $fieldset);
}

/**
 * Themes a select drop-down as a collection of radio buttons
 *
 * @see theme_select(), http://api.drupal.org/api/function/theme_select/6
 * @param object $element - An associative array containing the properties of the element.
 *                          Properties used: required, return_value, value, attributes, title, description
 * @return HTML string representing the form element.
 */
function theme_select_as_radios($element) {
  $output = '';
  foreach (element_children($element) as $key) {
    $output .= theme('radio', $element[$key]);
  }
  return '<div class="bef-select-as-radios">'. $output .'</div>';
}

/**
 * Themes a sort select drop-down as a collection of radio buttons
 *
 * @see theme_select(), http://api.drupal.org/api/function/theme_select/6
 * @param object $element - An associative array containing the properties of the element.
 *                          Properties used: title, value, options, description, extra, multiple, required
 * @return HTML string representing the form element.
 */
//function theme_sort_select_as_radio($element) {
//
//}
