<?php
/**
 * @file Tests for the Better Exposed Filters module
 * @author mikeker
 */

/**
 * Functional test for Better Exposed Filters
 */
class BEF_TestCase extends DrupalWebTestCase {
  /**
   * User with 'Administrator' role.
   */
  protected $admin_user;

  /**
   * Stores information about the view used in these tests.
   */
  protected $view = array();

  public static function getInfo() {
    return array(
      'name' => 'BEF Basic functionality tests',
      'description' => 'Basic tests for Better Exposed Filters.',
      'group' => 'Better Exposed Filters',
    );
  }

  public function setUp() {
    // For benchmarking.
    $this->start = time();

    // Enable any modules required for the test.
    parent::setUp('views', 'views_ui', 'better_exposed_filters', 'bef_test_content');

    // User with edit views perms
    $this->admin_user = $this->drupalCreateUser();
    $role = user_role_load_by_name('administrator');
    $this->assertTrue(!empty($role->rid), 'Found the "administrator" role.');
    user_save($this->admin_user, array('roles' => array($role->rid => $role->rid)));
    $this->drupalLogin($this->admin_user);

    // Build a basic view for use in tests.
    $this->befCreateView();

    // $this->befCreateDisplay('Page', array('path' => array('path' => 'bef_test_page')));

    // Add field to default display
    // $this->befAddField('node.title');

    // Turn of Better Exposed Filters
    $this->befSetBefExposedForm();
  }

  public function tearDown() {
    debug('This test run took ' . (time() - $this->start) . ' seconds.');
    unset($this->view);
    parent::tearDown();
  }

  /**
   * Verify BEF options display for binary and unlimited option fields
   */
  // public function test_befOptionsExist() {
  //   // Add filters to the default display
  //   $this->befAddFilter('node.title');
  //   $this->befAddFilter('node.status');
  //   $this->befAddFilter('node.type');
  //   $this->drupalGet($this->befGetBefSettingsUrl());

  //   $settings = array(
  //     'status_1' => 'Published',
  //     'type' => 'Type',
  //     'title' => 'Title'
  //   );

  //   foreach ($settings as $id => $label) {
  //     $translation = array(
  //       '!id' => $id,
  //       '!label' => $label,
  //     );
  //     $this->assertRaw(
  //       htmlentities(t('Display "!id" (Filter label: "!label") exposed filter as', $translation)),
  //       t('BEF options exist for exposed "!id" filter', $translation)
  //     );
  //     $this->assertRaw(
  //       htmlentities(t('More options for "!id" (Filter label: "!label")', $translation)),
  //       t('BEF "More options" fieldset exists for exposed "!id" filter', $translation)
  //     );
  //     $this->assertField(
  //       'edit-exposed-form-options-bef-' . str_replace('_', '-', $id) . '-bef-format',
  //       t('BEF options dropdown exists for "!id"', $translation)
  //     );
  //   }
  // }

  /**
   * Verify BEF options are saved and redisplayed properly
   */
  // public function test_befOptionsSave() {
  //   // Add filters to the default display
  //   $this->befAddFilter('node.status');
  //   $this->befAddFilter('node.type');
  //   $settings = array(
  //     'status_1' => 'Published',
  //     'type' => 'Type',
  //   );

  //   // Ensure basic BEF settings are preserved on save.
  //   foreach ($settings as $id => $label) {
  //     $edit = array(
  //       "exposed_form_options[bef][$id][bef_format]" => 'bef',
  //       "exposed_form_options[bef][$id][more_options][bef_filter_description]" => $this->randomName(16),
  //       "exposed_form_options[bef][$id][more_options][bef_collapsible]" => TRUE,
  //     );
  //     $this->befSetBefSettings($edit);
  //     $this->drupalGet($this->befGetBefSettingsUrl());
  //     foreach ($edit as $name => $expected) {
  //       $this->assertFieldByName($name, $expected);
  //     }
  //   }

  //   // This filter cannot use BEF settings. Ensure only generic settings are
  //   // available for open text filters.
  //   $this->befAddFilter('node.title');
  //   $this->drupalGet($this->befGetBefSettingsUrl());
  //   $this->assertNoFieldByName('exposed_form_options[bef][title][bef_format]', 'bef');
  //   $edit = array(
  //     "exposed_form_options[bef][$id][more_options][bef_filter_description]" => $this->randomName(16),
  //     "exposed_form_options[bef][$id][more_options][bef_collapsible]" => TRUE,
  //   );
  //   $this->befSetBefSettings($edit);
  //   $this->drupalGet($this->befGetBefSettingsUrl());
  //   foreach ($edit as $name => $expected) {
  //     $this->assertFieldByName($name, $expected);
  //   }
  // }

  /**
   * Verify BEF radio buttons are rendered correctly on a page view.
   */
  // public function test_befPageDisplayRadios() {
  //   // Create a page display to validate rendering.
  //   $this->befCreateDisplay('Page', array(
  //     'path' => array('path' => 'bef_test_page'),
  //   ));

  //   // Verify radio button rendering with the node type filter.
  //   $this->befAddFilter('node.type');
  //   $this->befSetBefSettings(array(
  //     'exposed_form_options[bef][type][bef_format]' => 'bef',
  //   ));

  //   $this->drupalGet('bef_test_page');
  //   $this->assertText(t('Type'), 'Exposed "Type" filter title renders correctly.');

  //   // Exposed filter options render as radio buttons.
  //   $this->assertFieldByXpath('//input[@name="type" and @type="radio" and @id="edit-type-all"]');
  //   $this->assertFieldByXpath('//input[@name="type" and @type="radio" and @id="edit-type-article"]');
  //   $this->assertFieldByXpath('//input[@name="type" and @type="radio" and @id="edit-type-page"]');
  //   $this->assertFieldByXpath('//input[@name="type" and @type="radio" and @id="edit-type-bef-test"]');

  //   // Now try it in a with the collapsible option.
  //   $this->befSetBefSettings(array(
  //     'exposed_form_options[bef][type][more_options][bef_collapsible]' => TRUE,
  //   ));

  //   $this->drupalGet('bef_test_page');

  //   // Exposed filter is shown as radio buttons enclosed within a fieldset.
  //   $this->assertFieldByXpath('//fieldset//input[@name="type" and @type="radio" and @id="edit-type-all"]');
  //   $this->assertFieldByXpath('//fieldset//input[@name="type" and @type="radio" and @id="edit-type-article"]');
  //   $this->assertFieldByXpath('//fieldset//input[@name="type" and @type="radio" and @id="edit-type-page"]');
  //   $this->assertFieldByXpath('//fieldset//input[@name="type" and @type="radio" and @id="edit-type-bef-test"]');

  //   // Filter label is used as the fieldset legend
  //   $this->assertFieldByXpath('//fieldset//legend[* = "Type"]');
  // }

  /**
   * Verify that checkboxes are rendered correctly on a page display
   */
  public function test_befPageDisplayCheckboxes() {
    // Create a page display to validate rendering.
    $this->befCreateDisplay('Page', array(
      'path' => array('path' => 'bef_test_page'),
    ));

    // Verify checkbox rendering with the node type filter.
    $this->befAddFilter('node.type', array(
      'options[expose][multiple]' => TRUE,
    ));
    $this->befSetBefSettings(array(
      'exposed_form_options[bef][type][bef_format]' => 'bef',
    ));

    $this->drupalGet('bef_test_page');
    $this->assertText(t('Type'), 'Exposed "Type" filter title renders correctly.');

    // Exposed filter option render as checkboxes.
    $this->assertFieldByXpath('//input[@name="type[]" and @type="checkbox" and @id="edit-type-article"]');
    $this->assertFieldByXpath('//input[@name="type[]" and @type="checkbox" and @id="edit-type-page"]');
    $this->assertFieldByXpath('//input[@name="type[]" and @type="checkbox" and @id="edit-type-bef-test"]');

    // Now try it in a with the collapsible option.
    $this->befSetBefSettings(array(
      'exposed_form_options[bef][type][more_options][bef_collapsible]' => TRUE,
    ));

    $this->drupalGet('bef_test_page');

    // Exposed filter is shown as checkboxes enclosed within a fieldset.
    $this->assertFieldByXpath('//fieldset//input[@name="type[]" and @type="checkbox" and @id="edit-type-article"]');
    $this->assertFieldByXpath('//fieldset//input[@name="type[]" and @type="checkbox" and @id="edit-type-page"]');
    $this->assertFieldByXpath('//fieldset//input[@name="type[]" and @type="checkbox" and @id="edit-type-bef-test"]');

    // Filter label is used as the fieldset legend
    $this->assertFieldByXpath('//fieldset//legend[* = "Type"]');

    // Test the select all/none option in both fieldsets and regular rendering.
    // $this->assertFieldByXpath(
    //   '//div[contains(@class, "bef-select-all-none")]',
    //   NULL,
    //   'Class is set correctly for JS to build select all/none links',
    //   'Beter Exposed Filters'
    // );
  }

/**
  * Verify that checkboxes are rendered correctly on a page display
  */
  // public function commented_out_test_befPageDisplayCheckboxesFieldset() {
  //   // Exposed the type filter such that it allows multiple selections
  //   $bef_settings = array(
  //     'bef_format' => 'bef',
  //     'bef_filter_description' => $this->randomName(16),
  //     'bef_select_all_none' => TRUE,
  //     'bef_collapsible' => TRUE,
  //     'single' => FALSE,
  //   );
  //   $this->befExposedFilterSettings('type', $bef_settings);

  //   // Add a page view to the default view
  //   $settings = array(
  //     'path' => array('path' => $this->randomName(8)),
  //   );
  //   $this->befCreateDisplay('page', $settings);
  //   $this->befSaveView();

  //   $this->drupalGet($settings['path']['path']);
  //   $this->assertText(t('Node: Type'), 'Verify exposed filter label', 'Better Exposed Filters');

  //   $this->assertFieldByXpath(
  //     '//fieldset//input[@name="type[]" and @type="checkbox"]',
  //     NULL,
  //     'Radio buttons are enclosed by a fieldset',
  //     'Better Exposed Filters'
  //   );
  //   $this->assertFieldByXpath(
  //     '//fieldset//div[contains(@class, "bef-select-all-none")]',
  //     NULL,
  //     'Class is set correctly for JS to build select all/none links',
  //     'Beter Exposed Filters'
  //   );
  //   $this->assertFieldByXpath(
  //     '//fieldset/legend',
  //     t('Node: Type'),
  //     'Filter label is used as the fieldset legend',
  //     'Better Exposed Filters'
  //   );
  // }

  /**
   * Verify hidden exposed filters are rendered correctly on a page display
   * @TODO: check the functionality of a multi-pass filter using hidden BEF settings.
   */
  // public function commented_out_test_befPageDisplayHidden() {
  //   $this->befExposedFilterSettings('type', array('bef_format' => 'bef_hidden'));

  //   // Add a page view to the default view
  //   $settings = array(
  //     'path' => array('path' => $this->randomName(8)),
  //   );
  //   $this->befCreateDisplay('page', $settings);
  //   $this->befSaveView();

  //   $this->drupalGet($settings['path']['path']);
  //   $this->assertNoText(t('Node: Type'), 'Verify hidden label does not appear', 'Better Exposed Filters');
  // }

  /**
   * Verify taxonomy-based exposed filters display correctly as both radio buttons and checkboxes
   */
  // public function commented_out_test_befTaxonomyFilters() {
  //   $this->taxonomy_user = $this->drupalCreateUser(array('access content', 'administer views', 'administer taxonomy'));
  //   $this->drupalLogin($this->taxonomy_user);

  //   // Add a vocabulary and populate with a few terms
  //   $edit = array(
  //     'name' => 'BEF test vocab',
  //     'nodes[page]' => TRUE,
  //     'nodes[story]' => TRUE,
  //   );
  //   $this->drupalPost('admin/content/taxonomy/add/vocabulary', $edit, 'Save');
  //   $terms = array('test1', 'test2', 'test3', 'test4');
  //   foreach ($terms as $term) {
  //     $this->drupalPost('admin/content/taxonomy/1/add/term', array('name' => $term), 'Save');
  //   }

  //   // Exposed the taxonomy filter
  //   $addl = array(
  //     'options[vid]' => TRUE,
  //     'options[type]' => 'select',
  //     'options[hierarchy]' => FALSE,
  //   );
  //   $this->befAddFilter('term_node.tid', TRUE, 'default', $addl);

  //   // Exposed filter settings
  //   $bef_settings = array(
  //     'bef_format' => 'bef',
  //     'bef_filter_description' => $this->randomName(16),
  //   );
  //   $this->befExposedFilterSettings('tid', $bef_settings);

  //   // Add a page view to the default view
  //   $settings = array(
  //     'path' => array('path' => $this->randomName(8)),
  //   );
  //   $this->befCreateDisplay('page', $settings);
  //   $this->befSaveView();

  //   // Verify taxonomy filter as radio buttons
  //   $this->drupalGet($settings['path']['path']);
  //   $this->assertText(t('Taxonomy: Term'), 'Verify exposed filter label', 'Better Exposed Filters');
  //   $this->assertFieldByXpath(
  //     '//input[@name="tid" and @type="radio"]',
  //     NULL,
  //     'Exposed filter is shown as radio buttons',
  //     'Better Exposed Filters'
  //   );

  //   // Set Force single to FALSE to display as checkboxes and set select all/none option
  //   $bef_settings = array(
  //     'bef_select_all_none' => TRUE,
  //     'single' => FALSE,
  //   );
  //   $this->befExposedFilterSettings('tid', $bef_settings);
  //   $this->befSaveView();

  //   // Verify taxonomy filter as checkboxes
  //   $this->drupalGet($settings['path']['path']);
  //   $this->assertText(t('Taxonomy: Term'), 'Verify exposed filter label', 'Better Exposed Filters');
  //   $this->assertFieldByXpath(
  //     '//input[@name="tid[]" and @type="checkbox"]',
  //     NULL,
  //     'Exposed filter is shown as checkboxes',
  //     'Better Exposed Filters'
  //   );
  //   $this->assertFieldByXpath(
  //     '//div[contains(@class, "bef-select-all-none")]',
  //     NULL,
  //     'Class is set correctly for JS to build select all/none links',
  //     'Beter Exposed Filters'
  //   );
  // }

  /*******************************************************************************
   * Helper functions -- mostly to deal with differences between Views 2.x and 3.x
   *******************************************************************************/

  /**
   * Returns the URL for the BEF exposed form settings page.
   */
  protected function befGetBefSettingsUrl() {
    return 'admin/structure/views/nojs/display/' . $this->view['machine_name'] . '/default/exposed_form_options';
  }

  protected function befCreateView($name = '') {
    if (!empty($this->view)) {
      debug('WARNING: befCreateView called after view has already been created.');
      return;
    }

    if (empty($name)) {
      $name = $this->randomName(8);
    }
    $this->view['name'] = $name;
    $this->view['machine_name'] = strtolower($name);

    $edit = array(
      'human_name' => $this->view['name'],
      'name' => $this->view['machine_name'],

      // Default is to create a page display.
      'page[create]' => FALSE,
    );
    $this->drupalPost('admin/structure/views/add', $edit, 'Save & exit');

    // URL to edit this view.
    $this->view['edit_url'] = 'admin/structure/views/view/' . $this->view['machine_name'] . '/edit';
  }

  /**
   * Creates a display of $type.  Currently supports:
   *    'Page'
   *
   * @todo: support more types...
   */
  protected function befCreateDisplay($type = 'Page', $settings = NULL) {
    if (!isset($this->view['displays'])) {
      $this->view['displays'] = array();
    }

    // Add a display of $type to the view
    $this->drupalPost($this->view['edit_url'], array() , "Add $type");

    // Grab the name of the newly created display and store some info about it.
    $url = $this->getUrl();
    $display_name = substr($url, strrpos($url, '/') +1);
    $this->view['displays'][$display_name] = array(
      'machine_name' => $display_name,
      'edit_url' => 'admin/structure/views/view/' . $this->view['machine_name'] . '/edit/' . $display_name,
      'settings_base_url' => 'admin/structure/views/nojs/display/' . $this->view['machine_name'] . '/' . $display_name,
    );

    // Settings should be in the form of 'path' => array_of_form_settings. Eg:
    // to set the title for a new display as an override:
    //  'title' => array(
    //    'title' => 'This is an override title',
    //    'override[dropdown]' => display_machine_name_goes_here,
    //  )
    //
    // If you navigate to
    //  admin/structure/views/nojs/display/<view_name>/<display_name>/title
    // you will see the form in question.
    foreach ($settings as $path => $values) {
      $this->drupalPost($this->view['displays'][$display_name]['settings_base_url'] . "/$path", $values, 'Apply');
    }
    $this->befSaveView();
  }

  /**
   * Adds a filter to a view display.
   *
   * $field: string in the form of node.status or
   *   field_data_field_example.field_example_value
   * $display: machine name of the display to add this filter to. NOTE:
   *   Currently only allows filters on the master display, no overrides.
   *   @todo: fix that, if needed.
   * $exposed: (bool) (optional, default: TRUE) Is this an exposed filter?
   * $settings: (array) Settings on the "Configure filter criterion" dialog.
   *   NOTE: called after the "Expose filter" button is pressed if $exposed
   *   is TRUE so you can set things like "Allow multiple items" or grouped
   *   filter options.
   * $additional: (array) settings for any additional configuration forms such
   *   as taxonomy term settings.
   */
  protected function befAddFilter($field, $settings = array(), $additional = array(), $exposed = TRUE, $display = 'default') {
    $edit = array(
      "name[$field]" => TRUE,
    );
    $url = 'admin/structure/views/nojs/add-item/' . $this->view['machine_name'] . "/$display/filter";
    $this->drupalPost($url, $edit, 'Add and configure filter criteria');

    if (!empty($additional)) {
      // Handle filter-specific options screen.
      $this->drupalPost (NULL, $additional, 'Apply');
    }

    if ($exposed) {
      $this->drupalPost(NULL, array(), 'Expose filter');
    }
    $this->drupalPost(NULL, $settings, 'Apply');
    $this->befSaveView();
  }

  protected function befAddField($field, $settings = array(), $display = 'default') {
    $edit = array(
      "name[$field]" => TRUE,
    );
    $url = 'admin/structure/views/nojs/add-item/' . $this->view['machine_name'] . "/$display/field";
    $this->drupalPost($url, $edit, 'Add and configure fields');
    $this->drupalPost(NULL, $settings, 'Apply');
    $this->befSaveView();
  }

  /**
   * Ensures that BEF is selected as the exposed form option
   */
  protected function befSetBefExposedForm($display = 'default') {
    $edit = array(
      "exposed_form[type]" => 'better_exposed_filters',
    );
    $url = 'admin/structure/views/nojs/display/' . $this->view['machine_name'] . "/$display/exposed_form";
    $this->drupalPost($url, $edit, 'Apply');

    // BEF settings is covered under befSetBefSettings() so we just accept the
    // default values and move on.
    $this->drupalPost(NULL, array(), 'Apply');
    $this->befSaveView();
  }

  protected function befSetBefSettings($settings) {
    $this->drupalPost($this->befGetBefSettingsUrl(), $settings, 'Apply');
    $this->befSaveView();
  }

  /**
   * Saves the view
   */
  protected function befSaveView() {
    $this->drupalPost($this->view['edit_url'], array(), 'Save');
  }

  /**
   * Specifies specific settings for an exposed filter for a given display
   *
   * NOTE: In Views 3.x, some of what used to be in the Configure Filteres dialog has moved to the
   *       Configure Exposed Form dialog.
   *
   * @param string $filter - name of the filter
   * @param array $settings - array of form elements => value entries
   * @return $settings array merged with default values
   */
//   protected function befExposedFilterSettings($filter, $settings = array(), $display = 'default') {
//     $processed_settings = array();
//     foreach ($settings as $elem => $setting) {
//       $processed_settings["options[expose][$elem]"] = $setting;
//     }

//     //DEBUG:
// //    foreach ($processed_settings as $item) {
// //      $this->verbose("processed_setting: $item");
// //    }
//     //END_DEBUG:

//     if ($this->views_version == 2) {
// //      $this->drupalGet("admin/structure/views/nojs/config-item/$this->view_name/$display/filter/$filter");
//       $this->drupalPost(
//         "admin/structure/views/nojs/config-item/$this->view_name/$display/filter/$filter",
//         $processed_settings,
//         'Update'
//       );
//       $this->drupalGet("admin/structure/views/nojs/config-item/$this->view_name/$display/filter/$filter");
//     }
//     else {
//       // All BEF settings are now in the Exposed Form dialog.

//       //@TODO
//     }
//     return $settings;
//   }
}

